apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-db-init-script
  labels:
    {{- include "appflowy.labels" . | nindent 4 }}
data:
  init.sql: |
    CREATE OR REPLACE FUNCTION create_roles(roles text []) RETURNS void LANGUAGE plpgsql AS $$
    DECLARE role_name text;
    BEGIN FOREACH role_name IN ARRAY roles LOOP IF NOT EXISTS (
        SELECT 1
        FROM pg_roles
        WHERE rolname = role_name
    ) THEN EXECUTE 'CREATE ROLE ' || role_name;
    END IF;
    END LOOP;
    END;
    $$;

    DO $$ BEGIN IF NOT EXISTS (
        SELECT
        FROM pg_catalog.pg_roles
        WHERE rolname = '{{ index .Values "postgresql" "customUsers" "usernames" }}'
    ) THEN CREATE USER "{{ index .Values "postgresql" "customUsers" "usernames" }}" BYPASSRLS NOINHERIT CREATEROLE LOGIN NOREPLICATION PASSWORD '{{ index .Values "postgresql" "customUsers" "passwords" }}';
    END IF;
    END $$;

    CREATE SCHEMA IF NOT EXISTS auth AUTHORIZATION {{ index .Values "postgresql" "customUsers" "usernames" }};
    GRANT CREATE ON DATABASE {{ index .Values "postgresql" "global" "postgresql" "auth" "database" }} TO {{ index .Values "postgresql" "customUsers" "usernames" }};
    ALTER USER {{ index .Values "postgresql" "customUsers" "usernames" }} SET search_path = 'auth';

    CREATE EXTENSION IF NOT EXISTS "vector";
