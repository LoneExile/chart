{{- if .Values.appflowy_cloud.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-cloud
  labels:
    {{- include "gotrue.labels" . | nindent 4 }}
    app.kubernetes.io/component: appflowy_cloud
spec:
  replicas: {{ .Values.appflowy_cloud.replicaCount }}
  selector:
    matchLabels:
      app: appflowy_cloud
      app.kubernetes.io/component: appflowy_cloud
  template:
    metadata:
      labels:
        app: appflowy_cloud
        app.kubernetes.io/component: appflowy_cloud
    spec:
#TODO: temp this
      initContainers:
        - name: check-db-ready
          image: "{{ index .Values "postgresql" "image" "repository" }}:{{ index .Values "postgresql" "image" "tag" }}"
          command:
            - /bin/bash
            - -c
            - |
              until PGPASSWORD=$POSTGRES_PASSWORD psql -h $POSTGRES_HOST -U $POSTGRES_USER -d $POSTGRES_DB -c '\q'; do
                echo "Waiting for postgres..."
                sleep 20
              done
              echo "PostgreSQL is ready"
          env:
            - name: POSTGRES_HOST
              value: {{ .Release.Name }}-postgresql
            - name: POSTGRES_USER
              value: {{ index .Values "postgresql" "customUsers" "usernames" }}
            - name: POSTGRES_PASSWORD
              value: "{{ index .Values "postgresql" "customUsers" "passwords" }}"
            - name: POSTGRES_DB
              value: {{ index .Values "postgresql" "global" "postgresql" "auth" "database" }}
      containers:
        - name: appflowy-cloud
          image: "{{ .Values.appflowy_cloud.image.repository }}:{{ .Values.appflowy_cloud.image.tag }}"
          imagePullPolicy: {{ .Values.appflowy_cloud.image.pullPolicy }}
          ports:
            - name: http
              containerPort: {{ .Values.appflowy_cloud.service.port }}
              protocol: TCP
          env:
            - name: RUST_LOG
              value: {{ .Values.appflowy_cloud.config.rustLog | quote }}
            - name: APPFLOWY_ENVIRONMENT
              value: {{ .Values.appflowy_cloud.config.environment | quote }}
            - name: APPFLOWY_S3_CREATE_BUCKET
              value: {{ .Values.appflowy_cloud.config.s3CreateBucket | quote }}
            - name: APPFLOWY_S3_USE_MINIO
              value: {{ .Values.appflowy_cloud.config.s3UseMinio | quote }}
            - name: APPFLOWY_S3_BUCKET
              value: {{ .Values.appflowy_cloud.config.s3Bucket | quote }}
            - name: APPFLOWY_S3_REGION
              value: {{ .Values.appflowy_cloud.config.s3Region | quote }}
            - name: APPFLOWY_MAILER_SMTP_TLS_KIND
              value: {{ .Values.appflowy_cloud.config.mailerSmtpTlsKind | quote }}
            - name: APPFLOWY_ACCESS_CONTROL
              value: {{ .Values.appflowy_cloud.config.accessControl | quote }}
            - name: APPFLOWY_DATABASE_MAX_CONNECTIONS
              value: {{ .Values.appflowy_cloud.config.databaseMaxConnections | quote }}
            - name: APPFLOWY_AI_SERVER_PORT
              value: {{ .Values.appflowy_cloud.config.aiServerPort | quote }}
          envFrom:
            - secretRef:
                name: {{ .Release.Name }}-appflowy-cloud-secrets
          resources:
            {{- toYaml .Values.appflowy_cloud.resources | nindent 12 }}
          # livenessProbe:
          #   httpGet:
          #     path: /health
          #     port: http
          #   initialDelaySeconds: 30
          #   periodSeconds: 10
          # readinessProbe:
          #   httpGet:
          #     path: /health
          #     port: http
          #   initialDelaySeconds: 5
          #   periodSeconds: 5
      {{- with .Values.appflowy_cloud.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.appflowy_cloud.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.appflowy_cloud.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
{{- end }}
